import {
  CustomValidatorOptionsType,
  Localizer,
  customizeValidator,
} from '@rjsf/validator-ajv8';
import {
  CustomValidator,
  ErrorSchema,
  ErrorTransformer,
  FormContextType,
  RJSFSchema,
  StrictRJSFSchema,
  UiSchema,
  ValidationData,
  ValidatorType,
  toErrorList,
} from '@rjsf/utils';

export class AJV8ProxyValidator<
  T = any,
  S extends StrictRJSFSchema = RJSFSchema,
  F extends FormContextType = any,
> implements ValidatorType<T, S, F>
{
  private ajv8: ValidatorType;

  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {
    this.ajv8 = customizeValidator(options, localizer);
  }

  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`
   *
   * @param errorSchema - The `ErrorSchema` instance to convert
   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified
   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in
   *        the next major release.
   */
  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {
    return toErrorList(errorSchema, fieldPath);
  }

  rawValidation<Result>(schema: S, formData?: T) {
    return this.ajv8.rawValidation<Result>(schema, formData);
  }

  validateFormData(
    formData: T | undefined,
    schema: S,
    customValidate?: CustomValidator<T, S, F>,
    transformErrors?: ErrorTransformer<T, S, F>,
    uiSchema?: UiSchema<T, S, F>,
  ): ValidationData<T> {
    //get errors from store
    //transform errors with processRawValidationErrors
  }

  isValid(schema: S, formData: T | undefined, rootSchema: S) {
    return true;
  }
}

/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if
 * provided. If a `localizer` is provided, it is used to translate the messages generated by the underlying AJV
 * validation.
 *
 * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance
 * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s
 * @returns - The custom validator implementation resulting from the set of parameters provided
 */
export function customcustomizeValidator<
  T = any,
  S extends StrictRJSFSchema = RJSFSchema,
  F extends FormContextType = any,
>(options: CustomValidatorOptionsType = {}, localizer?: Localizer) {
  return new AJV8ProxyValidator<T, S, F>(options, localizer);
}

export default customcustomizeValidator({
  ajvOptionsOverrides: {
    removeAdditional: true,
  },
});
